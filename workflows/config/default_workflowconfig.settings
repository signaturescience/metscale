from snakemake.utils import update_config

config_default = {

    "workflows" : {

        "samples_input_workflow" : {
            # Global parameter for the sample input to run on.
            # This replaces having samnples in every workflow
            "samples"    : ["SRR10402317"]
        },
        "read_filtering_pretrim_workflow" : {
        },
        "read_filtering_posttrim_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_multiqc_workflow" : {
        },
        "read_filtering_khmer_interleave_reads_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_khmer_subsample_interleaved_reads_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_khmer_split_interleaved_reads_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_khmer_count_unique_kmers_workflow" : {
            "qual"   : ["2","30"],
            "kmers" : [21,31,51]
        },
        "read_filtering_convert_PE_to_SE_workflow":{
            "qual"   : ["2","30"]
        },
        "assembly_metaspades_workflow" : {
            # the assembly workflow will be run on.
            # (metaspades assembler only).
            "qual"      : ["2","30"],
        },
        "assembly_spades_workflow" : {
            # the assembly workflow will be run on.
            # (spades assembler only).
            "qual"      : ["2","30"],
        },
        "assembly_plasmidspades_workflow" : {
            # the assembly workflow will be run on.
            # (plasmidspades assembler only).
            "qual"      : ["2","30"],
        },
        "assembly_rnaspades_workflow" : {
            # the assembly workflow will be run on.
            # (rnaspades assembler only).
            "qual"      : ["2","30"],
        },
        "assembly_megahit_workflow" : {
            # the assembly workflow will be run on
            # (megahit assembler only).
            "qual"      : ["2","30"],
        },
        "assembly_all_workflow" : {
            # the assembly workflow will be run on
            # (all assemblers).
            "qual"      : ["2","30"],
        },
        "assembly_quast_workflow" : {
            "assembler" : ["megahit","metaspades"],
            "qual"      : ["2","30"],
        },
        "assembly_metaquast_workflow" : {
            "assembler" : ["megahit","metaspades"],
            "qual"      : ["2","30"],
        },
        "assembly_quast_spades_workflow" : {
            "qual"      : ["2","30"],
        },
        "assembly_quast_plasmidspades_workflow" : {
            "qual"      : ["2","30"],
        },
        "assembly_multiqc_workflow" : {
            # #which assembler to get input from
            "multiqc_assembler" :  ["megahit","metaspades"],
        },
        "assembly_metaquast_rnaspades_workflow" : {
            "qual"      : ["2","30"],
        },
        "assembly_multiqc_rnaspades_workflow" : {
            "qual"      : ["2","30"],
        },
        "comparison_reads_workflow": {
            # these parameters determine which reads
            # the comparison workflow will be run on
            "kvalue"    : ["21","31","51"],
        },
        "comparison_assembly_workflow" : {
            # these parameters determine which assembled reads
            # the comparison workflow will be run on
            "kvalue"    : ["21","31","51"],
        },
        "comparison_reads_assembly_workflow" : {
            # these parameters determine which reads and assembled 
            # reads the comparison workflow will be run on
            "kvalue"    : ["21","31","51"],
        },
        "tax_class_signatures_workflow" : {
            "qual" : ["2","30"],
        },
        "tax_class_gather_workflow" : {
            "qual" : ["2","30"],
            "kvalues" : ["21","31","51"]
        },
        "tax_class_kaijureport_workflow" : {
            "qual" : ["2","30"],
        },
        "tax_class_kaijureport_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"] 
        },
        "tax_class_kaijureport_filtered_workflow" : {
            "qual" : ["2","30"],
        },
        "tax_class_kaijureport_filteredclass_workflow" : {
            "qual" : ["2","30"],
        },
        "tax_class_kaijureport_filteredclass_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]  
        },
        "tax_class_kaijureport_filtered_contigs_workflow": {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]  
        },
        "tax_class_add_taxonnames_workflow" : {
            "qual" : ["2","30"],        
        },
        "tax_class_add_taxonnames_contigs_workflow" : {
            "qual" : ["2","30"],  
            "assembler" : ["megahit","metaspades"]       
        },
        "tax_class_convert_kaiju_to_krona_workflow" : {
            "qual" : ["2","30"],        
        },
        "tax_class_kaiju_species_summary_workflow" : {
            "qual" : ["2","30"],        
        },
        "tax_class_kaiju_species_summary_contigs_workflow" : {
            "qual" : ["2","30"],  
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_visualize_krona_kaijureport_workflow" : {
            "qual" : ["2","30"],        
        },
        "tax_class_visualize_krona_kaijureport_contigs_workflow" : {
            "qual" : ["2","30"],  
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_visualize_krona_kaijureport_filtered_workflow" : {
            "qual" : ["2","30"],        
        },
        "tax_class_visualize_krona_kaijureport_filtered_contigs_workflow" : {
            "qual" : ["2","30"],  
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_visualize_krona_kaijureport_filteredclass_workflow" : {
            "qual" : ["2","30"],        
        },
        "tax_class_visualize_krona_kaijureport_filteredclass_contigs_workflow": {
            "qual" : ["2","30"],  
            "assembler" : ["megahit","metaspades"]        
            },
        "tax_class_visualize_krona_species_summary_workflow" : {
            "qual" : ["2","30"],        
        },
        "tax_class_visualize_krona_species_summary_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"] 
        },
        "tax_class_kraken2_workflow" : {
            "qual" : ["2","30"],
            # db to run against, this is the default DB downloaded from download python script.
            "db" : "minikraken_8GB_20200312", 
            # confidence score between 0 and 1
            "confidence" : 0,
        },
        "tax_class_krakenuniq_workflow" : {
            "qual" : ["2","30"],
            # db to run against, this is the default DB downloaded from download python script.
            "db" : "minikraken_20171019_8GB",
            # hll-precision score between 10 and 18
            "hll_precision" : 12  
        },
        "tax_class_bracken_workflow" : {
            "read_length" : 100,
            "level" : "S",
            "threshold" : 0,
            #directory that has DB dir. defaults to default dir
            "bdb" : "minikraken_8GB_20200312"
        },
        "tax_class_mash_dist_workflow" : {
            "qual" : ["2","30"],
            #mash db
            "mash_db" : "RefSeq_10K_Sketches.msh",
        },
        "tax_class_mash_screen_workflow" : {
            "qual" : ["2","30"],
            #mash db
            "mash_db" : "RefSeq_10K_Sketches.msh",
        },
        "tax_class_mtsv_workflow" : {
            "qual" : ["2","30"],
        },
        "functional_humann2_workflow" : {
            "qual" : ["2","30"],
        },
        "functional_humann3_workflow" : {
            "qual" : ["2","30"],
        },
        "functional_prokka_with_megahit_workflow" : {
            # these parameters determine which contig params 
            # from megahit to run prokka on
            "qual"      : ["2","30"],
        },
        "functional_prokka_metatrans_with_rnaspades_workflow" : {
            "qual"      : ["2","30"],
        },
        "functional_prokka_trans_with_rnaspades_workflow" : {
            "qual"      : ["2","30"],
        },
        "functional_prokka_with_metaspades_workflow" : {
            # these parameters determine which contig params
            # from metaspades to run prokka on
            "qual"      : ["2","30"],
        },
        "functional_prokka_with_spades_workflow" : {
            # these parameters determine which contig params
            # from spades to run prokka on
            "qual"      : ["2","30"],
        },
        "functional_abricate_with_megahit_workflow" : {
            # these parameters determine which contig params 
            # from megahit to run abricate on
            "qual"      : ["2","30"],
            # abricate db's - card, vfdb, argannot, resfinder, ncbibetalactamase, plasmidfinder
            #to use custom/external DB file "customDBabricate"
            "db"        : ["card", "vfdb"],
            #"db"        : ["customDBabricate"],
        },
        "functional_abricate_with_metaspades_workflow" : {
            # these parameters determine which contig params 
            # from metaspades to run abricate on
            "qual"      : ["2","30"],
            # abricate internal db's - card, vfdb, argannot, resfinder, ncbibetalactamase, plasmidfinder
            #to use custom/external DB file "customDBabricate"
            "db"        : ["card", "vfdb"],
            #"db"        : ["customDBabricate"],
        },
        "functional_abricate_with_spades_workflow" : {
            # these parameters determine which contig params 
            # from spades to run abricate on
            "qual"      : ["2","30"],
            # abricate internal db's - card, vfdb, argannot, resfinder, ncbibetalactamase, plasmidfinder
            #to use custom/external DB file "customDBabricate"
            "db"        : ["card", "vfdb"],
            #"db"        : ["customDBabricate"],
        },
        "functional_with_srst2_workflow" : {
            # these paramters determine srst2 input
            "qual"      : ["2","30"],
            #srst2 db's - {ARGannot.r3.fasta, ResFinder.fasta, PlasmidFinder.fasta, EcOH.fasta} or external DBs
            "db"        : ["ARGannot.r3.fasta", "ResFinder.fasta"]
        }
    }
}

update_config(config_default, config)
config = config_default
