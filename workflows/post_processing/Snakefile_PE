'''
Author: Chris Grahlmann
Affiliation: Signature Science

Date: 2019-05-01
Documentation: docs/workflow_comparison.md
'''

from os.path import join
import  glob

##################################################
# Post processing rules

data_dir = config['data_dir']
biocontainers = config['biocontainers']
taxclass = config['taxonomic_classification']
assembly = config['assembly']
readfilt = config['read_filtering']
comparison = config['comparison']
post_processing = config['post_processing']


##################################################
# Post processing build rules

# Skip to the very end of the file 
# to see the high-level build rules
# that trigger cascades of workflow
# tasks.


##################################################





##########################################################
output_dir_pattern = post_processing['move_samples_to_dir']['output_pattern']
samples_output_dir = join(data_dir, output_dir_pattern)


def get_input_files(wildcards):
    input_files = []
    sample_input = wildcards
    search_pattern = readfilt["read_patterns"]["reverse_pe_pattern_search"]
    replace_pattern = readfilt["read_patterns"]["reverse_pe_pattern_replace"]

    #forward string pattern
    input_file_pattern1 = join(data_dir,"{sample}*")
    input_file_pattern = expand(input_file_pattern1, sample = sample_input)
    input_files.extend(glob.glob(str(input_file_pattern[0])))

    #reverse string pattern
    input_rev_str = str(sample_input).rsplit(search_pattern, 1)
    input_rev_str = replace_pattern.join(input_rev_str)
    input_rev_str_pattern = join(data_dir,input_rev_str)
    input_rev_str_pattern = input_rev_str_pattern+"*"
    input_files.extend(glob.glob(input_rev_str_pattern))
    return input_files


rule move_samples_to_dir:
    '''
    move files to seperate dir after processing
    '''
    output:
        directory(samples_output_dir)
    params:
        output_dir = samples_output_dir,
        input_files = get_input_files
    message: 
        '--- Moving files to samples dir'
    shell:
        "post_processing/move_completed_files.sh {params.output_dir} {params.input_files}"


##################################################
# post processing: create combined output json file


combined_output = "{sample_mv}/combined_output.json".format(sample_mv= '{sample_mv}')
post_processing_dir = join(os.getcwd(), "post_processing")


def get_sample_dir(wildcards):
    sample_path = os.getcwd()  + "/" + str(wildcards)
    #print("SP:" +str(sample_path))
    return sample_path


rule generate_combined_output:
    '''
    create the combined output json file
    '''
    output:
        combined_output
    params:
        input_dir = get_sample_dir,
        post_prcoessing_dir = post_processing_dir,
    message:
        '--- Generating combined output file'
    script:
        "create_combined_output.py"



##################################################
# post processing: create the abundance graph


abudance_graph = post_processing['abundance_graph']['file_name'].format(sample_mv = '{sample_mv}')
#abudance_graph_sing = join(sing_dir, post_processing['abundance_graph']['file_name'].format(sample = '{sample}', sample_mv = '{sample_mv}'))


rule generate_abundance_graph:
    '''
    create abundance graph from R and py scripts
    '''
    input:
        combined_output
    output:
        abudance_graph
    params:
        input_dir = get_sample_dir,
        post_prcoessing_dir = post_processing_dir,
    message: 
        '--- Generating Abundance Graph'
    script:
        "create_abundance_graph.py"



##################################################
# post processing: create the HTML final report

html_output_file = post_processing['move_samples_to_dir']['out_pattern']
print("html_output_file "+str(html_output_file))


def get_sample_filenames(wildcards):
    sample_file_remove = output_dir_pattern.replace('{sample}','')
    wildcard_sample = str(wildcards)
    sample_file = wildcard_sample.replace(sample_file_remove,"")
    if sample_file == "":
        print("Error: Rscript input file patterns not found.")
    return sample_file


rule generate_r_script:
    '''
    generate R script for final reports
    '''
    input:
        abudance_graph
    output:
        html_output_file
    params:
        input_dir = get_sample_dir,  
        input_files = get_sample_filenames
    message: 
        '--- Generating Final Report'
    script:
        'summary-report.Rmd'


##################################################
# post processing: rename the HTML final report



def get_final_report(wildcards):
    print("html_output_file "+str(html_output_file))
    a = html_output_file.replace('/', '/'+str(wildcards)+'_')
    print(a)
    return 
a = html_output_file.replace('/','/{sample}_')



b= '{sample_mv}/{sample}_Summary-Report-Final.html'
final_report_file = b.format(sample='{sample}', sample_mv='{sample_mv}')
print(final_report_file)
#final_report_file = "SRR10402317_1_reads_finished/SRR10402317_summary-report.html"

rule rename_HTML_output_file:
    '''
    Add sample name to HTML report file
    '''
    input:
        html_output_file
    output:
        final_report_file 
    params:
        final_report_file
    message:
        '--- Rename Final Report File'
    shell:
        'mv html_output_file {params.final_report_file}'






 ###################################
# Post Processing: build rules      



rule post_processing_move_samples_dir_workflow:
    '''
    Build rule: Move all output files to subdir
    '''
    input:
        expand( samples_output_dir,
                sample    = sample_input_files,
        )


rule post_processing_create_final_report_workflow:
    '''
    Build rule: Create a final HTML report
    '''
    input:
        expand( final_report_file,
                sample_mv    = sample_finished_folders,
                sample    = sample_input_files,
        )
